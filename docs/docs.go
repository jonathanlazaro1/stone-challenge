// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Jonathan Lazaro",
            "email": "jonathan.lazaro1@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/jonathanlazaro1/stone-challenge/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Get authentication info, according to the token passed in the request header.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get authentication Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.AuthInfo"
                        }
                    },
                    "401": {
                        "description": "Indicates that no authorization info was provided, or authorization is invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Indicates an error that was not handled by the server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/invoice": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Fetch invoices according to query. Only active invoices can be fetched.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "List invoices",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of items per page",
                        "name": "itemsperpage",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page to fetch, given a number of items per page",
                        "name": "p",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by one or more of comma-separated queries. A query has the following structure: [filter_name]:[value]. Possible filters are: Reference Year = value (reference_year:value), Reference Month = value (reference_month:value) and Document contains value (document:value). Queries are inclusive.",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort results by one or more of comma-separated sort items. A sort item has the sort field name, followed by (optionally) a boolean indicating if the sort is in descending order. Sort items have the following structure: [sort_name]:[descending]. Possible sort fields are: Reference Year (reference_year:bool), Reference Month (reference_month:bool) and Document (document:bool). Sorts are inclusive.",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an object containing the array of Invoices found, among an integer indicating the total number of items for the query made.",
                        "schema": {
                            "$ref": "#/definitions/handler.InvoiceGetManyResult"
                        }
                    },
                    "400": {
                        "description": "Indicates a failure when parsing query params, or a itemsperpage query param greater than max value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Indicates that no authorization info was provided, or authorization is invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Indicates an error that was not handled by the server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Creates an invoice using the values supplied on the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "New Invoice",
                "parameters": [
                    {
                        "description": "Post Invoice Model. All fields are required.",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.PostModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The new invoice Id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Indicates a failure when parsing request body or a validation error, e.g. a required field is missing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Indicates that no authorization info was provided, or authorization is invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Indicates an error that was not handled by the server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/invoice/{id}": {
            "get": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Get an invoice, given its Id. Only an active Invoice can be fetched.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Get an invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of the invoice to fetch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Invoice"
                        }
                    },
                    "400": {
                        "description": "Indicates a failure when parsing invoice Id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Indicates that no authorization info was provided, or authorization is invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Indicates that no Invoice with given Id was found, or Invoice is deactivated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Indicates an error that was not handled by the server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Updates an Invoice under the supplied Id. All values on the Invoice will be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Update Invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of the invoice to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Invoice Model. All fields are required.",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.PostModel"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invoice was successfully updated."
                    },
                    "400": {
                        "description": "Indicates a failure when parsing Invoice Id|request body or a validation error, e.g. a required field is missing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Indicates that no authorization info was provided, or authorization is invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Indicates that no Invoice with given Id was found, or Invoice is deactivated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Indicates an error that was not handled by the server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Deactivates an Invoice, which means it will still exist on the server, but won't be capable of being retrieved|updated anymore.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Delete Invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of the invoice to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invoice was successfully deleted."
                    },
                    "400": {
                        "description": "Indicates a failure when parsing Invoice Id.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Indicates that no Invoice with given Id was found, or Invoice is deactivated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Indicates an error that was not handled by the server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "JwtAuth": []
                    }
                ],
                "description": "Updates an Invoice under the supplied Id. Only the supplied field values will be applied to the Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Update Invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of the invoice to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Invoice Model. All fields are optional.",
                        "name": "invoice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.PostModel"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invoice was successfully updated."
                    },
                    "400": {
                        "description": "Indicates a failure when parsing Invoice Id|request body.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Indicates that no authorization info was provided, or authorization is invalid.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Indicates that no Invoice with given Id was found, or Invoice is deactivated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Indicates an error that was not handled by the server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.AuthInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.Invoice": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "createdAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "deactivatedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "description": {
                    "type": "string"
                },
                "document": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "referenceMonth": {
                    "type": "integer"
                },
                "referenceYear": {
                    "type": "integer"
                }
            }
        },
        "handler.InvoiceGetManyResult": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Invoice"
                    }
                },
                "totalItems": {
                    "type": "integer"
                }
            }
        },
        "service.PostModel": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "document": {
                    "type": "string"
                },
                "referenceMonth": {
                    "type": "integer"
                },
                "referenceYear": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "JwtAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Invoice related operations",
            "name": "invoices"
        },
        {
            "description": "Auth related operations",
            "name": "auth"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "stone-invoice-api.herokuapp.com",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Invoice API",
	Description: "An API that takes care of Invoices",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
